{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Key",
				"KeywordThen"
			],
			[
				"open_",
				"open_file import OpenFile"
			],
			[
				"try_o",
				"try_on_then import TryOnThen"
			],
			[
				"Tr",
				"TryOnThen"
			],
			[
				"ini",
				"initial_value"
			],
			[
				"Ass",
				"Assignment"
			],
			[
				"init",
				"initial_value"
			],
			[
				"variable_de",
				"variable_declaration import VariableDeclaration"
			],
			[
				"Va",
				"VariableDeclaration"
			],
			[
				"Keyw",
				"KeywordFunc"
			],
			[
				"pee",
				"peek(parser.peek(0"
			],
			[
				"BITWISE",
				"BITWISEAND"
			],
			[
				"with",
				"with_prototype"
			],
			[
				"IO",
				"IO_ERROR"
			],
			[
				"Una",
				"Unable to open"
			],
			[
				"IO_ERROR",
				"IO_ERROR {"
			],
			[
				"source",
				"source_code"
			],
			[
				"key",
				"keyword"
			],
			[
				"sour",
				"source_code;"
			],
			[
				"ALL_TOKENS",
				"ALL_TOKENS = ["
			],
			[
				"test",
				"test_lexer"
			],
			[
				"Strin",
				"StringDelimiter():"
			],
			[
				"Value",
				"ValueError"
			],
			[
				"grou",
				"group("
			],
			[
				"RE_escap",
				"RE_ESCAPE.match(source, cursor):"
			],
			[
				"pred",
				"predicate(item)"
			],
			[
				"c",
				"count()"
			],
			[
				"para",
				"parameters"
			],
			[
				"fl",
				"flags_and_options"
			],
			[
				"fla",
				"flags_and_options"
			],
			[
				"flags_and_options",
				"flags_and_options = list"
			],
			[
				"MULT",
				"MULTIPLE"
			],
			[
				"read",
				"read_variable"
			],
			[
				"impo",
				"import StringLiteral"
			],
			[
				"chi",
				"children_context"
			],
			[
				"vl",
				"value"
			],
			[
				"Ty",
				"Type.FUNCTION"
			],
			[
				"un",
				"unpack(self.values.type)"
			],
			[
				"bird",
				"birdway"
			],
			[
				"_refere",
				"_reference"
			],
			[
				"s",
				"start"
			],
			[
				"val",
				"val._transpile("
			],
			[
				"_ref",
				"_reference(tui"
			],
			[
				"na",
				"nameof(T)"
			],
			[
				"no",
				"node._check()"
			],
			[
				"Type",
				"Type.UNKNOWN"
			],
			[
				"parse",
				"parser.peek(0)._line})"
			],
			[
				"ri",
				"raise BirdwaySyntaxError("
			],
			[
				"se",
				"self.key_type == Type.UNKNOWN"
			],
			[
				"Birdway",
				"BirdwayTypeError(f\""
			],
			[
				"i",
				"initialise"
			],
			[
				"sta",
				"start.initialise()"
			],
			[
				"_trans",
				"_transpile() for k, v in self.values."
			],
			[
				"ite",
				"items()"
			],
			[
				"valu",
				"values._transpile("
			],
			[
				"vla",
				"values"
			],
			[
				"cont",
				"context["
			],
			[
				"conte",
				"context["
			],
			[
				"tra",
				"transpile(self"
			],
			[
				"index",
				"index._reference(tui+\"2\")"
			],
			[
				"std",
				"std_types +="
			],
			[
				"va",
				"variable"
			],
			[
				"de",
				"declarations"
			],
			[
				"_",
				"_transpile"
			],
			[
				"_init",
				"_initialise() for a in self"
			],
			[
				"_ini",
				"_initialise()"
			],
			[
				"resu",
				"result._initialise()"
			],
			[
				"self",
				"self, parameters"
			],
			[
				"parameter",
				"parameters"
			],
			[
				"cty",
				"ctype(T)"
			],
			[
				"p",
				"parse_type"
			],
			[
				"pa",
				"parameters"
			],
			[
				"does",
				"doesn't support"
			],
			[
				"as",
				"ast, vc, lc, bc)"
			],
			[
				"__",
				"__init__"
			],
			[
				"INTE",
				"INTEGER"
			],
			[
				"che",
				"check(self):"
			],
			[
				"_chec",
				"_check(self"
			],
			[
				"chec",
				"check_type(self."
			],
			[
				"tbae",
				"table"
			],
			[
				"Tab",
				"Table"
			],
			[
				"S",
				"SIZE"
			],
			[
				"_add",
				"_AddResult"
			],
			[
				"property",
				"property (nonatomic,"
			],
			[
				"I",
				"Identified constructor called"
			],
			[
				"function_def",
				"function_definition import"
			],
			[
				"vc",
				"vc.register()"
			],
			[
				"Func",
				"FunctionDefinition"
			],
			[
				"regi",
				"register("
			],
			[
				"v",
				"variable"
			],
			[
				"us",
				"using"
			],
			[
				"_prop",
				"_propagate(self, ast, vc, lc, bc"
			],
			[
				"Fet",
				"FEATURE_STRING"
			],
			[
				"feat",
				"FEATURE_FORMATTING"
			],
			[
				"FEA",
				"FEATURE_STRING"
			],
			[
				"FEa",
				"FEATURE_PRINTLN"
			],
			[
				"is",
				"is not None:"
			],
			[
				"MUL",
				"MULTIPLE"
			],
			[
				"_p",
				"_propagate(self, ast, vc, lc, bc):"
			],
			[
				"_propa",
				"_propagate(self, ast, vc, lc, bc"
			],
			[
				"_pr",
				"_propagate(self, ast, vc, lc, bc):"
			],
			[
				"uign",
				"using |="
			],
			[
				"result",
				"result = None"
			],
			[
				"_Add",
				"_AddResult"
			],
			[
				"re",
				"result"
			],
			[
				"He",
				"Hello world!\""
			],
			[
				"function_",
				"function_call import FunctionCall"
			],
			[
				"Bin",
				"BinaryOperation"
			],
			[
				"binary_op",
				"binary_operation import BinaryOperation"
			],
			[
				"r",
				"roperand"
			],
			[
				"ex",
				"expr."
			],
			[
				"l",
				"loperand"
			],
			[
				"e",
				"expr."
			],
			[
				"op",
				"operator = op"
			],
			[
				"Bina",
				"BinaryOperator"
			],
			[
				"Taa",
				"TableAccess"
			],
			[
				"Table",
				"TableEnd()"
			],
			[
				"Form",
				"FormattingExpressionBegin"
			],
			[
				"Pr",
				"PrintLine._parse(self)"
			],
			[
				"Block",
				"Block._parse(self)"
			],
			[
				"ra",
				"range"
			],
			[
				"el",
				"elif"
			],
			[
				"Enu",
				"EnumPromise"
			],
			[
				"Bir",
				"BirdwayNameError"
			],
			[
				"Keywor",
				"KeywordStruct"
			],
			[
				"RERA",
				"RE_RANGE"
			],
			[
				"parse_",
				"parse_formatted_string"
			],
			[
				"inte",
				"interpolation"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "Packages/Default/Syntax Tests.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Default/Syntax Tests.sublime-build",
					""
				],
				[
					"Packages/Default/Syntax Tests.sublime-build",
					"All Syntaxes"
				],
				[
					"Packages/Default/Syntax Tests.sublime-build",
					"Performance"
				],
				[
					"Packages/Default/Syntax Tests.sublime-build",
					"Regex Compatibility"
				]
			],
			[
				"Packages/Default/Syntax Tests.sublime-build",
				"Performance"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"pyth",
				"Set Syntax: Python"
			],
			[
				"python",
				"python-black: Create Black Configuration File"
			],
			[
				"pyt",
				"Set Syntax: Python"
			],
			[
				"bird",
				"Set Syntax: Birdway"
			],
			[
				"c sy",
				"Set Syntax: C"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"rust",
				"Set Syntax: Rust"
			],
			[
				"syntax c",
				"Set Syntax: C"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/louis/Birdway/pybw/parser.py",
		"/home/louis/Birdway/src/birdway.bw",
		"/home/louis/Birdway/complete.bw",
		"/home/louis/Birdway/pybw/nodes/__init__.py",
		"/home/louis/Birdway/pybw/nodes/open_file.py",
		"/home/louis/Birdway/pybw/nodes/try_on_then.py",
		"/home/louis/Birdway/pybw/lexer.py",
		"/home/louis/Birdway/pybw/tokens.py",
		"/home/louis/Birdway/pybw/main.py",
		"/home/louis/Birdway/.gitignore",
		"/home/louis/Birdway/pybw/nodes/variable_declaration.py",
		"/home/louis/Birdway/pybw/nodes/block.py",
		"/home/louis/Birdway/pybw/nodes/string_literal.py",
		"/home/louis/Birdway/sublime-package/Birdway.sublime-syntax",
		"/home/louis/Birdway/tests/tests.py",
		"/home/louis/Birdway/tests/test_lexer.bw",
		"/home/louis/Birdway/pyproject.toml",
		"/home/louis/Birdway/pybw/generator.py",
		"/home/louis/Birdway/birdway.bwtmp.c",
		"/home/louis/Birdway/pybw/utils.py",
		"/home/louis/Birdway/pybw/checks.py",
		"/home/louis/Birdway/pybw/nodes/program.py",
		"/home/louis/Birdway/pybw/nodes/formatted_string.py",
		"/home/louis/Birdway/pybw/nodes/read_variable.py",
		"/home/louis/Birdway/pybw/nodes/option.py",
		"/home/louis/Birdway/pybw/nodes/parameter.py",
		"/home/louis/Birdway/pybw/nodes/for_loop.py",
		"/home/louis/Birdway/birdway.tree",
		"/home/louis/Birdway/pybw/nodes/table.py",
		"/home/louis/Birdway/pybw/birdway.py",
		"/home/louis/Birdway/pybw/nodes/unary_operation.py",
		"/home/louis/Birdway/pybw/nodes/range.py",
		"/home/louis/Birdway/pybw/nodes/base.py",
		"/home/louis/Birdway/pybw/nodes/function_call.py",
		"/home/louis/Birdway/pybw/nodes/table_access.py",
		"/home/louis/Birdway/pybw/nodes/binary_operation.py",
		"/home/louis/Birdway/pybw/nodes/function_definition.py",
		"/home/louis/Birdway/pybw/nodes/integer_literal.py",
		"/home/louis/Birdway/pybw/version.py",
		"/home/louis/Birdway/docs/source/specs/structure.rst",
		"/home/louis/Birdway/docs/source/specs/loops.rst",
		"/home/louis/Birdway/pybw/nodes/print_line.py",
		"/home/louis/Birdway/pybw/autorepr.py",
		"/home/louis/Birdway/pybw/nodes/struct_definition.py",
		"/home/louis/Birdway/pybw/nodes/enum_definition.py",
		"/home/louis/Birdway/src/birdway_lexer.bwe",
		"/home/louis/Birdway/sublime-package/Birdway Extension.sublime-syntax",
		"/home/louis/.config/sublime-text/Packages/User/syntax-3.sublime-syntax",
		"/home/louis/Birdway/src/test.bwe",
		"/home/louis/Birdway/pybw/nodes/if_then_else.py",
		"/home/louis/Birdway/birdway.bw",
		"/home/louis/Birdway/greet.bw",
		"/home/louis/Birdway/greet.bwtmp.c",
		"/home/louis/Birdway/birdway.sublime-project"
	],
	"find":
	{
		"height": 29.0
	},
	"find_in_files":
	{
		"height": 113.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"ifthenelse",
			"function",
			"():\n",
			"opt",
			"arg",
			"Arg",
			"arg",
			"Arg",
			"arg",
			"Arg",
			"arg",
			"parameter",
			"str",
			"value",
			"key",
			"key_type",
			"remaining",
			"str",
			"\"{\n",
			"table",
			"node",
			"start",
			"node",
			"self",
			"parser",
			"birdway",
			"if parser\\.peek\\(0\\) != LineEnd\\(\\):\\n.*\\n.*\\n.*\\n.*eat\\(\\)",
			"if parser\\.peek(0) != LineEnd():",
			"Table",
			"parser",
			"StructDefinition",
			"parser",
			"StringLiteral",
			"parser",
			"Program",
			"parser",
			"Parameter",
			"parser",
			"self",
			"parser",
			"self",
			"struct",
			"()\n",
			"self",
			"str",
			"()\n",
			"(Token, AutoRepr):\n    pass\n\n\nclass ",
			"(Token, AutoRepr):\n    pass",
			"class ",
			"line",
			"example-c"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"",
			"\",\n    \"",
			"\"",
			"int(line)"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": false
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 29.0
	},
	"input":
	{
		"height": 43.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 150.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Default/Syntax Tests.sublime-build",
	"project": "bot-etiq.sublime-project",
	"replace":
	{
		"height": 54.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"gene",
				"pybw/generator.py"
			],
			[
				"chec",
				"pybw/checks.py"
			],
			[
				"bas",
				"pybw/nodes/base.py"
			],
			[
				"lexe",
				"pybw/lexer.py"
			],
			[
				"ta",
				"pybw/nodes/table.py"
			],
			[
				"una",
				"pybw/nodes/unary_operation.py"
			],
			[
				"bird",
				"pybw/birdway.py"
			],
			[
				"tab",
				"pybw/nodes/table.py"
			],
			[
				"blo",
				"pybw/nodes/block.py"
			],
			[
				"p",
				"pybw/parser.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 256.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
